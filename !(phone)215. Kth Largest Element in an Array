比较简单的做法，O(N lg K) running time + O(K) memory
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int val : nums){
            pq.offer(val);
            if(pq.size()>k){
                pq.poll();
            }
        }
        return pq.peek();
    }
}
///////////////////////////////////
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums == null || nums.length == 0){
            return Integer.MAX_VALUE;
        }
        return find(nums,0,nums.length-1,nums.length-k);
    }
    public int find(int[] nums,int start,int end,int k){
        if(start > end) return Integer.MAX_VALUE;
        int pivot = nums[end];
        int left = start;
        for(int i = start; i < end; i++){
            if(nums[i] <= pivot){
                swap(nums,left++,i);
            }
        }
        swap(nums,left,end);
        if(left == k){
            return nums[left];
        }
        else if(left < k){
            return find(nums,left+1,end,k);
        }
        else{
            return find(nums,start,left-1,k);
        }
    }
    public void swap(int[]nums,int i,int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

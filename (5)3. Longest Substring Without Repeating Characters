public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0 || s == null){
            return 0;
        }
     Set<Character> set = new HashSet<Character>();
     int p2 = 0;
     int p1 = 0;
     int result = 1;
     while(p2 < s.length()){
         while(set.contains(s.charAt(p2))){
             set.remove(s.charAt(p1));
             p1++;
         }
         set.add(s.charAt(p2));
         result = Math.max(result, p2 - p1 + 1);
         p2++;
     }
     return result;
    }
}
/////use map, not solved by myself
public int lengthOfLongestSubstring(String s) {
        if (s.length()==0) return 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int max=0;
        for (int i=0, j=0; i<s.length(); ++i){
            if (map.containsKey(s.charAt(i))){
                j = Math.max(j,map.get(s.charAt(i))+1);
            }
            map.put(s.charAt(i),i);
            max = Math.max(max,i-j+1);
        }
        return max;
    }

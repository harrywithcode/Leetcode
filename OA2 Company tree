import java.util.*;
class Node{
	int val;
	ArrayList<Node> children;
	public Node(int val){
		this.val = val;
		children = new ArrayList<Node>();
	}
}

class SumCount{
	int sum;
	int count;
	public SumCount(int sum, int count){
		this.sum = sum;
		this.count = count;
	}
}

class CompanyTree{
	private double average = Double.MIN_VALUE;
	private Node result;
	public Node test(Node root){
		if(root == null){
			return null;
		}
		dfs(root);
		return result;
	}
	public SumCount dfs(Node root){
		if(root.children == null || root.children.size() == 0){//important!
			return new SumCount(root.val, 1);
		}
		int sum = root.val;
		int count = 1;
		for(Node child : root.children){
			SumCount c = dfs(child);
			sum = sum+ c.sum;
			count = count + c.count;
		}
		double averageSum = (double)sum/count;
		if(averageSum > average){
			average = averageSum;
			result = root;
		}
		return new SumCount(sum,count);
	}
}
public class Solution {
	public static void main(String[] args) {
        Node root = new Node(1);
        Node l21 = new Node(2);
        Node l22 = new Node(3);
        Node l23 = new Node(4);
        Node l31 = new Node(5);
        Node l32 = new Node(5);
        Node l33 = new Node(5);
        Node l34 = new Node(5);
        Node l35 = new Node(5);
        Node l36 = new Node(5);

        l21.children.add(l31);
        l21.children.add(l32);

        l22.children.add(l33);
        l22.children.add(l34);

        l23.children.add(l35);
        l23.children.add(l36);

        root.children.add(l21);
        root.children.add(l22);
        root.children.add(l23);
        
        CompanyTree c = new CompanyTree();
        Node res = c.test(root);
        SumCount s = new SumCount(0,0);
        s = c.dfs(res);
        System.out.println(res.val + " " + s.sum + " " + s.count);
    }
}
/////////////////////////全局变量先声明，但在函数里面再赋值，先声明的时候不要赋值
import java.util.*;
class Node{
	int val;
	ArrayList<Node> children;
	public Node(int val){
		this.val = val;
		children = new ArrayList<Node>();
	}
}

class SumCount{
	int sum;
	int count;
	public SumCount(int sum, int count){
		this.sum = sum;
		this.count = count;
	}
}

class CompanyTree{
	private double average;
	private Node result;
	public Node test(Node root){
		result = null;
		if(root == null){
			return null;
		}
		dfs(root);
		return result;
	}
	public SumCount dfs(Node root){
		result = null;
		average = Double.MIN_VALUE;
		if(root.children == null || root.children.size() == 0){//important!
			return new SumCount(root.val, 1);
		}
		int sum = root.val;
		int count = 1;
		for(Node child : root.children){
			SumCount c = dfs(child);
			sum = sum+ c.sum;
			count = count + c.count;
		}
		double averageSum = (double)sum/count;
		if(averageSum > average){
			average = averageSum;
			result = root;
		}
		return new SumCount(sum,count);
	}
}
public class Solution {
	public static void main(String[] args) {
        Node root = new Node(1);
        Node l21 = new Node(2);
        Node l22 = new Node(3);
        Node l23 = new Node(4);
        Node l31 = new Node(5);
        Node l32 = new Node(5);
        Node l33 = new Node(5);
        Node l34 = new Node(5);
        Node l35 = new Node(5);
        Node l36 = new Node(5);

        l21.children.add(l31);
        l21.children.add(l32);

        l22.children.add(l33);
        l22.children.add(l34);

        l23.children.add(l35);
        l23.children.add(l36);

        root.children.add(l21);
        root.children.add(l22);
        root.children.add(l23);
        
        CompanyTree c = new CompanyTree();
        Node res = c.test(root);
        SumCount s = new SumCount(0,0);
        s = c.dfs(res);
        System.out.println(res.val + " " + s.sum + " " + s.count);
    }
}

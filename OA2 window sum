//[4, 2, 73, 11, -5] and window size 2 should return [6, 75, 84, 6]，第一个和第二个相加，作为新数组的第一位，第二个和第三个相加，以此类推
//[1, 2, 3, 4] and window size 3 should return [6,9]. 
问题的关键: 
为什么要用 List list = new ArrayList() ,而不用 ArrayList alist = new ArrayList()呢？ 
问题就在于List有多个实现类，现在你用的是ArrayList，也许哪一天你需要换成其它的实现类，如 LinkedList或者Vector等等，这时你只要改变这一行就行了： 
List list = new LinkedList(); 其它使用了list地方的代码根本不需要改动。 
假设你开始用 ArrayList alist = new ArrayList(), 这下你有的改了，特别是如果你使用了 ArrayList特有的方法和属性。


第一种，输入是list，输出也是list，这里面需要注意的是list和ArrayList的区别
import java.util.List;
import java.util.ArrayList;

class windowSum{
	public List<Integer> getSum(List<Integer> a, int size){
		ArrayList <Integer> result = new ArrayList<Integer>();
    if(a == null || a.size() == 0 || a.size() < k || k <= 0){
      return result;    //这里记住，要返回一个之前定义了的result，不能返回null，因为他们test case的原因
    }
		for(int i = 0; i + size - 1< a.size(); i++){
			int sum = 0;
			for(int j = 0; j < size; j++){
				sum = sum + a.get(i+j);
			}
			result.add(i,sum);
		}
		return result;
	}
}
public class Solution {
	public static void main(String[] args){
		windowSum t = new windowSum();
		List<Integer> a = new ArrayList<Integer>();  //注意这里建list的时候，new后面接的是ArrayList！！
    //List是一个接口，而ListArray是一个类。 
    //ListArray继承并实现了List。 
    //所以List不能被构造
		a.add(1);
		a.add(2);
		a.add(3);
		a.add(4);
		a.add(5);
		a.add(6);
		int size = 2;
		List <Integer> result = new ArrayList<Integer>();//这句话很有意思
    //result的类是list，所以下面一行，result可以容纳list
    //如果把上面那个class返回的类型改成ArrayList，依然没毛病，list大 ，可以装下小弟ArrayList
    //但是问题来了，如果上面那个class返回的是List，但你下面result定义成ArrayList，那就不行了！！因为小弟装不下大哥啊！！
		result = t.getSum(a,size);
		for(int i = 0; i < result.size(); i++){
			System.out.print(result.get(i)+" ");
		}
	}
}

///////////第二种类型题，输入输出都变成数组形式了////////
package inputIsArray;

class question{
	public int[] test(int []array, int size){
		if(array == null || array.length == 0 || array.length< size || size <= 0){
			return null;    //不知道用不用返回result，到时候再随机应变
		}
		int[] result = new int[array.length - size + 1];
		for(int i = 0;i < array.length - size + 1; i++){ //这里注意一下
			int sum = 0;
			for(int j = 0; j < size; j++){
				sum = sum + array[i+j];
			}
			result[i] = sum;
		}
		return result;
	}
}
public class WinSum {
	public static void main(String[] args){
		int [] array = {1,2,3,4,5,6};
		int size = 2;
		question a = new question();
		int [] result = new int[array.length - size + 1];
		result = a.test(array,size);
		for(int i = 0; i < result.length;i++){
			System.out.println(result[i]+" ");
		}
	}
}
//对于数组这个，有一个看似更快的办法，先贴上，明天看！！
public class SumOfWindow {
    public int[] Solution(int[] array, int k) {
        if (array == null || array.length < k || k <= 0)    return null;
        int[] rvalue = new int[array.length - k + 1];
        for (int i = 0; i < k; i++)
            rvalue[0] += array[i];
        for (int i = 1; i < rvalue.length; i++) {
            rvalue[i] = rvalue[i-1] - array[i-1] + array[i+k-1];
        }
        return rvalue;
    }
}


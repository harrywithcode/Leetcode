/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode head){
        if (head == null || head.next == null) {
            return head;
        }
		ListNode newHead = new ListNode(0);
        newHead.next = head;
        

        // find the middle node
        ListNode fast = newHead;
        ListNode slow = newHead;

        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }

        // reverse the second half of linked list
        ListNode pre = null;
        ListNode temp;
        head = slow.next;
        while(head != null) {
            temp = head.next;
            head.next = pre;
            pre = head;
            head = temp;
        }

        slow.next = pre;
        return newHead.next;
    }
}

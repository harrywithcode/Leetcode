/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        helper(root, 0, result);
        return result;
    }
    
    private void helper(TreeNode node, int level, List<List<Integer>> res){
        if(node == null){
            return;
        }
        if(res.size() == level){  //size shi cong 1 kaishi, level shi cong 0 kaishi, size bixu dengyu level+1
            res.add(new ArrayList<>());
        }
        res.get(level++).add(node.val); //why level++, how recursive works??(look below)
        helper(node.left, level, res);
        helper(node.right, level, res);
    }
}


BFS iterative:

public List<List<Integer>> levelOrder(TreeNode root) {
		List<List<Integer>> res = new ArrayList<>();
		if (root == null)
			return res;
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		while(!q.isEmpty()) {
			int levelSize = q.size();
			List<Integer> currLevel = new ArrayList<>();
			for(int i = 0; i < levelSize; i++) {
				TreeNode currNode = q.poll();
				currLevel.add(currNode.val);
				if (currNode.left != null)
					q.add(currNode.left);
				if (currNode.right != null)
					q.add(currNode.right);
			}
			res.add(currLevel);
		}
		return res;
	}
	
// This version would be easier to understand
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        helper(root,0,result);
        return result;
    }
    private void helper(TreeNode root, int level, List<List<Integer>> res){
        if(root == null) return;
        if(res.size() == level){
            res.add(new ArrayList());
        }
        res.get(level).add(root.val);
        helper(root.left, level+1, res);
        helper(root.right, level+1, res);
    }
}

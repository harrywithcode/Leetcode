下面那个只能解决正方形，用这个：
package rotateImage;

class Rotate{
	public int[][] rotate(int[][] matrix, int flag) {
        int m = matrix.length;
        int n = matrix[0].length;
        int temp = 0;
        int [][]result = new int[n][m];
        if(flag == 1){
	        for(int i = 0; i < n; i++){
	            for(int j = 0; j < m ; j++){
	                result[i][j] = matrix[j][i];
	            }
	        }
	        for(int i = 0; i < n / 2; i++){
	        	for(int j = 0; j < m; j++){
	        		temp = result[i][j];
	        		result [i][j] = result [n - i - 1][j];
	        		result [n - i - 1][j] = temp;
	        	}
	        }
        }
        if(flag == 0){
        	for(int i = 0; i < n; i++){
	            for(int j = 0; j < m ; j++){
	                result[i][j] = matrix[j][i];
	            }
	        }
        	for(int i = 0; i < n; i++){
	        	for(int j = 0; j < m/2; j++){
	        		temp = result[i][j];
	        		result[i][j] = result[i][m - j - 1];
	        		result[i][m - j - 1] = temp;
	        	}
	        }
        }
        return result;
	}
}

public class Solution {   
    public static void main(String[] args){
    	int[][] matrix = new int[3][4];
    	
    	matrix[0][0] = 1;
    	matrix[0][1] = 2;
    	matrix[0][2] = 3;
    	matrix[0][3] = 4;
    	
    	matrix[1][0] = 5;
    	matrix[1][1] = 6;
    	matrix[1][2] = 7;
    	matrix[1][3] = 8;
    	
    	matrix[2][0] = 9;
    	matrix[2][1] = 10;
    	matrix[2][2] = 11;
    	matrix[2][3] = 12;
    	
    	//matrix[3][0] = 13;
    	//matrix[3][1] = 14;
    	//matrix[3][2] = 15;
    	//matrix[3][3] = 16;
    	
    	Rotate test = new Rotate();
    	int flag = 1;
    	int [][]result = new int[matrix[0].length][matrix.length];
    	result = test.rotate(matrix,flag);
    	for(int i = 0; i < result.length; i++){
    		for(int j = 0; j < result[0].length; j++){
    			System.out.print(result[i][j] + " ");
    		}
    		System.out.println();
    	}
    }
}
/////////////////////////////////////////////////////////////

package rotateImage;

class Rotate{
	public void rotate(int[][] matrix, int flag) {
        int n = matrix.length;
        int temp = 0;
        if(flag == 1){
	        for(int i = 0; i < n; i++){
	            for(int j = 0; j < n - i; j++){
	                temp = matrix[i][j];
	                matrix[i][j] = matrix[n - j - 1][n - i - 1];
	                matrix[n - j - 1][n - i - 1] = temp;
	            }
	        }
	        for(int i = 0; i < n / 2; i++){
	        	for(int j = 0; j < n; j++){
	        		temp = matrix[i][j];
	        		matrix[i][j] = matrix[n - i - 1][j];
	        		matrix[n - i - 1][j] = temp;
	        	}
	        }
        }
        if(flag == 0){
        	for(int i = 0; i < n; i++){
	            for(int j = i; j < n ; j++){
	                temp = matrix[i][j];
	                matrix[i][j] = matrix[j][i];
	                matrix[j][i] = temp;
	            }
	        }
        	for(int i = 0; i < n / 2; i++){
	        	for(int j = 0; j < n; j++){
	        		temp = matrix[i][j];
	        		matrix[i][j] = matrix[n - i - 1][j];
	        		matrix[n - i - 1][j] = temp;
	        	}
	        }
        }
	}
}

public class Solution {   
    public static void main(String[] args){
    	int[][] matrix = new int[4][4];
    	
    	matrix[0][0] = 1;
    	matrix[0][1] = 2;
    	matrix[0][2] = 3;
    	matrix[0][3] = 4;
    	
    	matrix[1][0] = 5;
    	matrix[1][1] = 6;
    	matrix[1][2] = 7;
    	matrix[1][3] = 8;
    	
    	matrix[2][0] = 9;
    	matrix[2][1] = 10;
    	matrix[2][2] = 11;
    	matrix[2][3] = 12;
    	
    	matrix[3][0] = 13;
    	matrix[3][1] = 14;
    	matrix[3][2] = 15;
    	matrix[3][3] = 16;
    	
    	Rotate test = new Rotate();
    	int flag = 0;
    	test.rotate(matrix,flag);
    	for(int i = 0; i < 4; i++){
    		for(int j = 0; j < 4; j++){
    			System.out.print(matrix[i][j] + " ");
    		}
    		System.out.println();
    	}
    }
}

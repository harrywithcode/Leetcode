/////////My submission, correct!!!! But use division, which is forbiden in this question, god damn it!!/////////////
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int mul = 1;
        int count = 0;  // how many 0 items in this array
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0){
                count++;
                continue;
            }
            else{
                mul = mul*nums[i]; // the product must not be 0 because I skip all 0 itmes
            }
        }
        if(count > 1){ //if there are two or more than two 0s in this array
            for(int j = 0; j < nums.length; j++){
                nums[j] = 0;  //all items are 0
            }
        }
        if(count == 1){ //if there is only one 0 in this array
           for(int j = 0; j < nums.length; j++){
                if(nums[j] == 0){  //the 0 item will be mul
                    nums[j] = mul;
                }
                else{
                    nums[j] = 0;  //all the other items are 0
                    
                }
            } 
        }
        if(count == 0){  //no 0 item
            for(int j = 0; j < nums.length; j++){
                nums[j] = mul / nums[j];  //divide
            }
        }
        return nums;
    }
}

/////////////////////////////////////////////////////////
Thank @lycjava3 for this smart solution. To understand it easily, let me explain it with an example.

Given numbers [2, 3, 4, 5], regarding the third number 4, the product of array except 4 is 2*3*5 which consists of two parts: left 2*3 and right 5. The product is left*right. We can get lefts and rights:

Numbers:     2    3    4     5
Lefts:            2  2*3 2*3*4
Rights:  3*4*5  4*5    5      
Let’s fill the empty with 1:

Numbers:     2    3    4     5
Lefts:       1    2  2*3 2*3*4
Rights:  3*4*5  4*5    5     1
We can calculate lefts and rights in 2 loops. The time complexity is O(n).

We store lefts in result array. If we allocate a new array for rights. The space complexity is O(n). To make it O(1), we just need to store it in a variable which is right in @lycjava3’s code.

Clear code with comments:

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        int left = 1;
        int right = 1;
        result[0] = 1;
        for(int i = 1; i < nums.length; i++){
            left = left * nums[i - 1];
            result[i] = left;
        }
        for(int i = nums.length - 1; i >= 0; i--){
            result[i] = result[i] * right;
            right = right * nums[i];
        }
        return result;
    }
}
///////////////////////////////////////////////////////////////////////////
int[] result = new int[nums.length];
    for (int i = 0; i < result.length; i++) result[i] = 1;
    int left = 1, right = 1;
    for (int i = 0, j = nums.length - 1; i < nums.length - 1; i++, j--) {
        left *= nums[i];
        right *= nums[j];
        result[i + 1] *= left;
        result[j - 1] *= right;
    }
    return result;
